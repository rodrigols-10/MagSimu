/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Execucao;

import Classes.CampoMagnetico;
import Classes.Eliptico;
import Classes.PrismaEliptico;
import Classes.PrismaRetangular;
import Classes.Resultados;
import Classes.Retangular;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.time.Duration;
import java.time.Instant;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JScrollPane;

/**
 *
 * @author Rodrigo
 */
public class Principal extends javax.swing.JFrame {
    
    private static Resultados res;
    private int         X;
    private int         Y;
    private int         Z;
    private static int TG;
    private int        NH;
    private int        NC;
    private double     HI;
    private double     HF;
    private double      D;
    private String     TM;
    private String     AN;
    private static boolean desenharTela = false;
    int IH = 1;
    
    /**
     * Creates new form RedeParticulas
     */
    public Principal() {
        initComponents();
        
        URL url_icon = getClass().getResource("/Midia/icone.png");
        Image icone = Toolkit.getDefaultToolkit().getImage(url_icon);
        this.setIconImage(icone);
        
        setExtendedState(MAXIMIZED_BOTH);//Maximiza a tela 
        this.setLocationRelativeTo(null);//Desabilita o redimensionamento da janela (vai ficar sempre maximizada)
        
        NovoTeste.setEnabled(false);
        SalvarDipolar.setEnabled(false);
        SalvarMagnetizacao.setEnabled(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        tela = new JRede();
        status = new javax.swing.JLabel();
        iniciar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        NovoTeste = new javax.swing.JMenuItem();
        SalvarMagnetizacao = new javax.swing.JMenuItem();
        SalvarDipolar = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MagSimu");

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
        );

        tela.setBackground(new java.awt.Color(255, 255, 255));

        status.setVisible(false);
        status.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        status.setForeground(new java.awt.Color(204, 0, 0));
        status.setText("CALCULANDO...");

        iniciar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        iniciar.setText("INICIAR");
        iniciar.setAutoscrolls(true);
        iniciar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        iniciar.setName(""); // NOI18N
        iniciar.setPreferredSize(new java.awt.Dimension(60, 27));
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout telaLayout = new javax.swing.GroupLayout(tela);
        tela.setLayout(telaLayout);
        telaLayout.setHorizontalGroup(
            telaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(telaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(telaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(status))
                .addContainerGap(209, Short.MAX_VALUE))
        );
        telaLayout.setVerticalGroup(
            telaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(telaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(status)
                .addContainerGap())
        );

        iniciar.getAccessibleContext().setAccessibleDescription("");
        iniciar.setBounds((1000-70)/2, (680-35)/2, 70, 35);

        jMenu1.setText("Opções");

        NovoTeste.setText("Novo Teste...");
        NovoTeste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NovoTesteActionPerformed(evt);
            }
        });
        jMenu1.add(NovoTeste);

        SalvarMagnetizacao.setText("Salvar dados Magnetização");
        SalvarMagnetizacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalvarMagnetizacaoActionPerformed(evt);
            }
        });
        jMenu1.add(SalvarMagnetizacao);

        SalvarDipolar.setText("Salvar dados Campo Dipolar");
        SalvarDipolar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalvarDipolarActionPerformed(evt);
            }
        });
        jMenu1.add(SalvarDipolar);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(tela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tela, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
        // TODO add your handling code here:
        Principal rp = this;
        
        Entrada dd = new Entrada(rp,false);
        dd.setVisible(true);
        /*
        timer.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                if((IH <= cm.getNH())){//roda o calculo,pinta a tela, e depois roda o calculo mais 9 vezes sem pintar.
                    cm.Campo(rp, IH);
                    tela.repaint();
                    IH = IH + 1;
                    for(int i=IH; i<IH+9;i++){
                        if(i > cm.getNH()){ tela.repaint(); break;}
                        cm.Campo(rp, i);
                    }
                    IH = IH + 9;
                } else {
                    cm.CampoDipolar(cm.getNH());
                    status.setText("Concluído!");
                    timer.cancel();
                }
            }
        }, 1, 1*500);
        */
    }//GEN-LAST:event_iniciarActionPerformed

    private void SalvarMagnetizacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalvarMagnetizacaoActionPerformed
        // TODO add your handling code here:
        String txt;
        JFileChooser salvar = new JFileChooser();
        int opcao = salvar.showSaveDialog(this);
        try {
            FileWriter arquivo = new FileWriter (salvar.getSelectedFile().getPath());
            //a = salvar.getSelectedFile().getPath();
            BufferedWriter saida = new BufferedWriter(arquivo);
            txt = getRes().getDADOS_GRAFICO(); //LEMBRANDO: Apenas os dados do ultimo IH são salvos, pois os outros vão sendo apagados a medida que se calcula
            saida.write(txt);
            saida.close();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SalvarMagnetizacaoActionPerformed

    private void NovoTesteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NovoTesteActionPerformed
        // TODO add your handling code here:        
        setDesenharTela(false);
        tela.repaint();
        IH = 1;
        jTextArea1.setText("");
        status.setVisible(false);
        status.setText("Calculando...");
        iniciar.setVisible(true);
        
        //Ao fazer novo teste, é necessário que, durante o processo, os itens de menu estejam desabilitados
        NovoTeste.setEnabled(false);
        SalvarDipolar.setEnabled(false);
        SalvarMagnetizacao.setEnabled(false);
    }//GEN-LAST:event_NovoTesteActionPerformed

    private void SalvarDipolarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalvarDipolarActionPerformed
        // TODO add your handling code here
        String txt;
        JFileChooser salvar = new JFileChooser();
        int opcao = salvar.showSaveDialog(this);
        try {
            FileWriter arquivo = new FileWriter (salvar.getSelectedFile().getPath());
            //a = salvar.getSelectedFile().getPath();
            BufferedWriter saida = new BufferedWriter(arquivo);
            txt =getRes().getDADOS_DIPOLAR();
            saida.write(txt);
            saida.close();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SalvarDipolarActionPerformed

    public void Calcular(){
        
        res = new Resultados(X,Y,Z);
        res.Inicializacao(getTM(), getNH(), getNC(), getHI(), getHF(), getD(), getAN());
        
        iniciar.setVisible(false);
        
        Principal rp = this;
        Timer timer = new Timer();
        
        setDesenharTela(true);
        getRes().setTamPanelX(tela.getWidth());
        getRes().setTamPanelY(tela.getHeight());
        
        status.setVisible(true);
        
        Instant inicio = Instant.now(); // Marca o momento de inicio do cálculo
        
        if(getTG() == 1){
            Retangular ret;
            ret = new Retangular(X,Y,Z);
            ret.Inicializacao(getTM(), getNH(), getNC(), getHI(), getHF(), getD(), getAN());
            
            timer.scheduleAtFixedRate(new TimerTask() {
                public void run() {
                    if((IH <= getNH())){
                        ret.Campo(rp, getRes(), IH);
                        tela.repaint();
                        IH = IH + 1;
                    } else {
                        ret.CampoDipolar(getRes(), getNH());
                        status.setText("CONCLUIDO!");

                        Instant fim = Instant.now();

                        Duration duracao = Duration.between(inicio, fim);
                        long duracaoEmMilissegundos = duracao.toMillis();

                        Area().setText(Area().getText()+"\n\n\n-----------------\n Tempo de execução: "+duracaoEmMilissegundos+" ms");
                        
                        NovoTeste.setEnabled(true);
                        SalvarDipolar.setEnabled(true);
                        SalvarMagnetizacao.setEnabled(true);
                        
                        timer.cancel();
                    }
                    
                    //Isto faz a barra de rolagem permanescer no final                    
                    jScrollPane2.getViewport().setViewPosition(new Point((int) jScrollPane2.getViewport().getViewPosition().getX(), Area().getHeight()));
                    jScrollPane2.validate();
                    
                }
            }, 1, 1*400);
        } else if(getTG() == 2){
            Eliptico eli;
            eli = new Eliptico(X,Y,Z);
            eli.Inicializacao(getRes(), getTM(), getNH(), getNC(), getHI(), getHF(), getD(), getAN());
            
            timer.scheduleAtFixedRate(new TimerTask() {
                public void run() {
                    if((IH <= getNH())){
                        eli.CampoElipse(rp, getRes(), IH);
                        tela.repaint();
                        IH = IH + 1;
                    } else {
                        eli.CampoDipolarElipse(getRes(), getNH());
                        status.setText("CONCLUIDO!");

                        Instant fim = Instant.now();

                        Duration duracao = Duration.between(inicio, fim);
                        long duracaoEmMilissegundos = duracao.toMillis();

                        Area().setText(Area().getText()+"\n\n\n-----------------\n Tempo de execução: "+duracaoEmMilissegundos+" ms");
                        
                        NovoTeste.setEnabled(true);
                        SalvarDipolar.setEnabled(true);
                        SalvarMagnetizacao.setEnabled(true);
                        
                        timer.cancel();
                    }
                    
                    //Isto faz a barra de rolagem permanescer no final                    
                    jScrollPane2.getViewport().setViewPosition(new Point((int) jScrollPane2.getViewport().getViewPosition().getX(), Area().getHeight()));
                    jScrollPane2.validate();
                }
            }, 1, 1*500);
        } else if(getTG() == 3){
            PrismaRetangular pret;
            pret = new PrismaRetangular(X,Y,Z);
            pret.Inicializacao(getTM(), getNH(), getNC(), getHI(), getHF(), getD(), getAN());
            
            timer.scheduleAtFixedRate(new TimerTask() {
                public void run() {
                    if((IH <= getNH())){
                        pret.CampoPrismaRetangular(rp, getRes(), IH);
                        tela.repaint();
                        IH = IH + 1;
                    } else {
                        status.setText("CONCLUIDO!");

                        Instant fim = Instant.now();

                        Duration duracao = Duration.between(inicio, fim);
                        long duracaoEmMilissegundos = duracao.toMillis();

                        Area().setText(Area().getText()+"\n\n\n-----------------\n Tempo de execução: "+duracaoEmMilissegundos+" ms");
                        
                        NovoTeste.setEnabled(true);
                        SalvarDipolar.setEnabled(true);
                        SalvarMagnetizacao.setEnabled(true);
                        
                        timer.cancel();
                    }
                    
                    //Isto faz a barra de rolagem permanescer no final                    
                    jScrollPane2.getViewport().setViewPosition(new Point((int) jScrollPane2.getViewport().getViewPosition().getX(), Area().getHeight()));
                    jScrollPane2.validate();
                }
            }, 1, 1*500);
        } else if(getTG() == 4){
            PrismaEliptico peli;
            peli = new PrismaEliptico(X,Y,Z);
            peli.Inicializacao(res, getTM(), getNH(), getNC(), getHI(), getHF(), getD(), getAN());
            
            timer.scheduleAtFixedRate(new TimerTask() {
                public void run() {
                    if((IH <= getNH())){
                        peli.CampoPrismaEliptico(rp, getRes(), IH);
                        tela.repaint();
                        IH = IH + 1;
                    } else {
                        status.setText("CONCLUIDO!");

                        Instant fim = Instant.now();

                        Duration duracao = Duration.between(inicio, fim);
                        long duracaoEmMilissegundos = duracao.toMillis();

                        Area().setText(Area().getText()+"\n\n\n-----------------\n Tempo de execução: "+duracaoEmMilissegundos+" ms");
                        
                        NovoTeste.setEnabled(true);
                        SalvarDipolar.setEnabled(true);
                        SalvarMagnetizacao.setEnabled(true);
                        
                        timer.cancel();
                    }
                    
                    //Isto faz a barra de rolagem permanescer no final                    
                    jScrollPane2.getViewport().setViewPosition(new Point((int) jScrollPane2.getViewport().getViewPosition().getX(), Area().getHeight()));
                    jScrollPane2.validate();
                }
            }, 1, 1*500);
        }
    }
    
    public javax.swing.JTextArea Area(){
        return jTextArea1;
    }
    
    public javax.swing.JLabel getStatus(){
        return status;
    }
    
    public javax.swing.JPanel getTela(){
        return tela;
    }
    
    public static boolean isDesenharTela() {
        return desenharTela;
    }

    public static void setDesenharTela(boolean aDesenharTela) {
        desenharTela = aDesenharTela;
    }
    
    public static Resultados getRes() {
        return res;
    }
    
    public static void setRes(Resultados aRes) {
        res = aRes;
    }
    
    public int getX() {
        return X;
    }

    public void setX(int X) {
        this.X = X;
    }

    public int getY() {
        return Y;
    }

    public void setY(int Y) {
        this.Y = Y;
    }

    public int getZ() {
        return Z;
    }

    public void setZ(int Z) {
        this.Z = Z;
    }

    public static int getTG() {
        return TG;
    }

    public static void setTG(int aTG) {
        TG = aTG;
    }

    public int getNH() {
        return NH;
    }

    public void setNH(int NH) {
        this.NH = NH;
    }

    public int getNC() {
        return NC;
    }

    public void setNC(int NC) {
        this.NC = NC;
    }

    public double getHI() {
        return HI;
    }

    public void setHI(double HI) {
        this.HI = HI;
    }

    public double getHF() {
        return HF;
    }

    public void setHF(double HF) {
        this.HF = HF;
    }

    public double getD() {
        return D;
    }

    public void setD(double D) {
        this.D = D;
    }

    public String getAN() {
        return AN;
    }
    
    public void setAN(String AN) {
        this.AN = AN;
    }
    
    public String getTM() {
        return TM;
    }

    public void setTM(String TM) {
        this.TM = TM;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem NovoTeste;
    private javax.swing.JMenuItem SalvarDipolar;
    private javax.swing.JMenuItem SalvarMagnetizacao;
    private javax.swing.JButton iniciar;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel status;
    private javax.swing.JPanel tela;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the a
     */
}
